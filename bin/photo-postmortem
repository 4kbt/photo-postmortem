#!/usr/bin/env ruby

require "active_support/core_ext/time"
require "byebug"
require "find"
require "optparse"
require "photo/postmortem/exif"
require "spreadsheet"

def main
  options = parse_commandline_options

  start_times = get_photo_creation_times(options[:start_photos_directory],
                                         options[:timezone])
  end_times = get_photo_creation_times(options[:end_photos_directory],
                                       options[:timezone])
  all_times = get_photo_creation_times(options[:all_photos_directory],
                                       options[:timezone]) if options[:all_photos_directory]

  workbook = create_workbook(options[:spreadsheet])
  add_to_worksheet(worksheet: workbook.worksheet(0),
                   all_times: all_times,
                   start_times: start_times,
                   end_times: end_times)
  workbook.write(options[:spreadsheet])
end

def add_time(rows, name, times)
  times.each do |time|
    date_str = to_local_date_string(time)
    rows[date_str] ||= {}
    rows[date_str][name] = to_local_time_string(time)
  end
end

def incr_time(rows, name, times)
  times.each do |time|
    date_str = to_local_date_string(time)
    rows[date_str] ||= {}
    rows[date_str][name] ||= 0
    rows[date_str][name] += 1
  end
end

def add_to_worksheet(worksheet:,
                     all_times:,
                     start_times:,
                     end_times:)
  rows = {}
  add_time(rows, :start, start_times)
  add_time(rows, :end, end_times)
  incr_time(rows, :all, all_times) if all_times

  worksheet.insert_row(0, ['Day', 'Start', 'End', 'Photo Count'])
  rows.sort.each do |day, values|
    worksheet.insert_row(1, [day, values[:start], values[:end], values[:all]])
  end
end

# Without this the Excel spreadsheet shows the time in UTC
def to_local_time_string(time)
  time.strftime('%Y/%m/%d %H:%M')
end
def to_local_date_string(time)
  time.strftime('%Y/%m/%d')
end

def create_workbook(spreadsheet_filename)
  fail "Spreadsheet already exists" if File.exist?(spreadsheet_filename)

  workbook = Spreadsheet::Workbook.new
  workbook.create_worksheet

  return workbook
end

def get_photo_creation_times(photos_directory, timezone)
  creation_times = []
  print "Reading #{photos_directory}"
  Find.find(photos_directory).each do |photo_path|
    next if File.directory?(photo_path)
    print "."
    $stdout.flush

    exif = Photo::Postmortem::Exif.new(photo_path)
    creation_time = exif.creation_time
    unless creation_time
      puts "Unable to get creation date from #{photo_path}. Skipping it."
      next
    end
    creation_time = creation_time.in_time_zone(timezone) if timezone
    creation_times << creation_time
  end
  print "\n"

  creation_times
end

def parse_commandline_options
  options = {}
  required_options = []
  option_parser = OptionParser.new do |opts|
    opts.banner = "Usage: photo-postmortem OPTIONS"

    required_options << 'spreadsheet'
    opts.on("--spreadsheet=FILENAME", "The spreadsheet file to create") do |v|
      options[:spreadsheet] = v
    end

    required_options << 'start-photos-directory'
    opts.on("--start-photos-directory=DIRECTORY", "Directory containing start-of-day photos.") do |v|
      options[:start_photos_directory] = v
    end

    required_options << 'end-photos-directory'
    opts.on("--end-photos-directory=DIRECTORY", "Directory containing end-of-day photos.") do |v|
      options[:end_photos_directory] = v
    end

    opts.on("--all-photos-directory=DIRECTORY", "Directory containing all photos.") do |v|
      options[:all_photos_directory] = v
    end

    # EXIF does not store timezone information, so the times we get
    # from the EXIF APIs are all in the system's default timezone.  So
    # all this --timezone option does is shift the offset of all the
    # photos by the same amount.
    timezones = ActiveSupport::TimeZone.all.map { |tz| tz.name }.sort.join(", ")
    opts.on("--timezone=NAME", "Optional name of the timezone for the dates in the spreadsheet. #{timezones}") do |v|
      options[:timezone] = v
    end

    opts.on_tail("--help", "This help message.") do |v|
      puts opts
      exit
    end
  end

  option_parser.parse!

  required_options.each do |required_option|
    next unless options[required_option.gsub('-', '_').to_sym].nil?
    raise OptionParser::MissingArgument.new("--#{required_option}")
  end

  return options
end

main

